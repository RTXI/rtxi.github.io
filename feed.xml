<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RTXI</title>
    <description>RTXI is a fast, open-source system for hard real-time, closed-loop data acquisition and stimulation for electrophysiology experiments.</description>
    <link>http://rtxi.org</link>
    <atom:link href="http://rtxi.org/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Making New Modules in RTXI</title>
        <description>&lt;p&gt;Outlined here is the development process for making new RTXI modules. We recommend our users to build their modules by using MyPluginGUI as the template. MyPluginGUI defines a basic GUI with customizable widgets and is found in the Plugin-Template directory of our GitHub repository. Anyone is free to fork off of it to create their own modules. GitHub provides &lt;a href=&quot;https://help.github.com/articles/fork-a-repo&quot;&gt;its own documentation&lt;/a&gt; on how to fork other users’ repositories. We strongly recommend reading it. &lt;/p&gt;

&lt;h3 id=&quot;the-general-process-of-modifying-rtxi-plugins-is-as-follows&quot;&gt;The general process of modifying RTXI plugins is as follows:&lt;/h3&gt;

&lt;h4 id=&quot;fork-from-rtxis-github-page&quot;&gt;1. Fork from RTXI’s GitHub page&lt;/h4&gt;
&lt;p&gt;From our site, go to the Plugin-Template repository. Contained there are the source files for MyPluginGUI, which is the default template from which we encourage users to develop.  &lt;/p&gt;

&lt;p&gt;Forking will create a copy of our repository in your own GitHub account for you to modify. &lt;/p&gt;

&lt;h4 id=&quot;clone-the-repository-on-your-local-machine&quot;&gt;2. Clone the repository on your local machine&lt;/h4&gt;

&lt;p&gt;Now, clone the repository. Developers for new modules are expected to base it on MyPluginGUI. Type:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/&amp;lt;username&amp;gt;/plugin-template plugin_template&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that &amp;lt;username&amp;gt; represents the username of your own GitHub account, not that of RTXI. That is the case because users cannot modify repositories without the permission of their owners. Because MyPluginGUI was forked and copied into your own repository, you are completely free to edit it, and that will not affect the copy in the RTXI repository. &lt;/p&gt;

&lt;p&gt;In the command, the last parameter, &lt;code&gt;plugin_template&lt;/code&gt;, sets the name of the directory in which all the cloned information will be stored. This parameter is optional. If left blank, the directory name defaults to the name of the repository being cloned. &lt;/p&gt;

&lt;p&gt;Now that clone is executed, look at the directory contents and you will see a subdirectory called &lt;code&gt;plugin_template&lt;/code&gt;. Inside there are the source files for MyPluginGUI. An explanation of the header and source files is viewable &lt;a href=&quot;https://github.com/RTXI/tutorials/wiki/MyPluginGUI-Base-Code&quot;&gt;FIX THIS LINK!!!&lt;/a&gt;. &lt;/p&gt;

&lt;h4 id=&quot;modify-files&quot;&gt;3. Modify files&lt;/h4&gt;
&lt;p&gt;Modify the RTXI files to reflect the changes and functionalities you want to implement. Also, be sure to rename the source files to something other than my_plugin_gui, preferable something that reflects the module’s function. A quick and easy way to change the name from my_plugin_gui is to use the &lt;code&gt;sed&lt;/code&gt; and &lt;code&gt;mv&lt;/code&gt; commands. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sed -i &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/plugin-template/&amp;lt;new_name_here&amp;gt;/g&amp;#39;&lt;/span&gt; plugin-template.* Makefile
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sed -i &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/PluginTemplate/&amp;lt;NewNameHere&amp;gt;/g&amp;#39;&lt;/span&gt; plugin-template.* Makefile
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mv plugin-template.cpp &amp;lt;new_name_here&amp;gt;.cpp
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mv plugin-template.h &amp;lt;new_name_here&amp;gt;.h&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Additionally, we request that users document their changes within the files. As a general rule, document it such that one can be confident that anyone with programming experience will be able to understand the changes implemented. &lt;/p&gt;

&lt;p&gt;To install the module on your system, run:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;push-changes-to-your-own-github-repository&quot;&gt;4. Push changes to your own GitHub repository&lt;/h4&gt;

&lt;p&gt;Commit your changes and push them back to your repository. (To learn what that means, &lt;a href=&quot;/docs/tutorials/2015/04/07/how-to-use-git/&quot;&gt;read this&lt;/a&gt;.)  &lt;/p&gt;

&lt;p&gt;This will install your module in RTXI, and it will be available among all of your installed modules when you use the ‘Load Modules’ in the drop-down menu for ‘Modules’ in the RTXI main window. &lt;/p&gt;

&lt;h4 id=&quot;submit-a-pull-request-for-your-plugin&quot;&gt;5. Submit a pull request for your plugin&lt;/h4&gt;
&lt;p&gt;Go to the home page for your repository and select ‘Pull Requests’ on the sidebar. This will take you to a page where you can submit pull requests to all of the projects to which you contribute and view the status of those requests. &lt;/p&gt;

&lt;p&gt;GitHub provides its own complete documentation on how to &lt;a href=&quot;https://help.github.com/articles/creating-a-pull-request&quot;&gt;create a pull request&lt;/a&gt; and &lt;a href=&quot;https://help.github.com/articles/using-pull-requests&quot;&gt;how to use them&lt;/a&gt; in general for project development. &lt;/p&gt;
</description>
        <pubDate>Fri, 10 Apr 2015 00:00:00 -0400</pubDate>
        <link>http://rtxi.org//docs/tutorials/2015/04/10/making-new-rtxi-modules/</link>
        <guid isPermaLink="true">http://rtxi.org//docs/tutorials/2015/04/10/making-new-rtxi-modules/</guid>
      </item>
    
      <item>
        <title>Posting Bugs and Issues on GitHub</title>
        <description>&lt;p&gt;RTXI is in active development, and our work depends heavily on user feedback. This tutorial provides instructions for creating bug reports, posting questions about issues, making feature requests, etc. through GitHub. Though email will also work, we strongly encourage using GitHub so that users can see existing issues and contribute to overall discussion. To use GitHub, you will need to create a &lt;a href=&quot;https://github.com/join&quot;&gt;GitHub account&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; For the sake of absolute clarity, please do not actually create an issue in the process of going though this tutorial.  &lt;/p&gt;

&lt;h4 id=&quot;navigate-to-the-repository&quot;&gt;1. Navigate to the repository.&lt;/h4&gt;
&lt;div class=&quot;row&quot;&gt;
	&lt;div class=&quot;col-md-8 col-xs-12&quot;&gt; 
Go to our GitHub page (&lt;a href=&quot;https://github.com/rtxi&quot;&gt;https://github.com/rtxi&lt;/a&gt;). On the page, use the search bar or scroll down until you find the software you want to report. If you experience a bug within RTXI and its built-in modules, look for the `rtxi` repository. If it&#39;s a module you have problems with, find the repository that correponds to the module name. Also, if you have questions about anything on this website, go to the `rtxi.github.io` repository.  
		&lt;div&gt;&amp;nbsp;&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class=&quot;col-md-4 col-xs-12&quot;&gt;
		&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col-xs-10 col-xs-offset-1 col-md-12 col-md-offset-0&quot;&gt;
			&lt;a href=&quot;/assets/img/tutorials/rtxi-github-main-page.png&quot;&gt;
				&lt;img src=&quot;/assets/img/tutorials/rtxi-github-main-page.png&quot; class=&quot;img-responsive&quot; /&gt;
			&lt;/a&gt;
		&lt;/div&gt;&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;h4 id=&quot;open-an-issue-on-the-repository-page&quot;&gt;2. Open an issue on the repository page.&lt;/h4&gt;
&lt;p&gt;Each module has an issue page where you can view, submit, and comment on current development issues. Pictured is the repository page for &lt;code&gt;rtxi&lt;/code&gt;. To navigate to its issues page, click on &lt;code&gt;Issues&lt;/code&gt; on the right sidebar.  &lt;/p&gt;

&lt;p&gt;Click on &lt;code&gt;Issues&lt;/code&gt;. It’s on the sidebar to the right. If you haven’t logged in to GitHub already, you will be prompted to now. This will open up a new page that shows all the issues posted to the repository. Look through them to see if the issue you are having is related to something someone else posted. If it is, you can add to the existing discussion. If not, then open up a new issue.  &lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
	&lt;div class=&quot;col-xs-12 col-sm-6 col-md-5 col-md-offset-1&quot;&gt;
		&lt;a href=&quot;/assets/img/tutorials/rtxi-github-rtxi-page.png&quot;&gt;
			&lt;img src=&quot;/assets/img/tutorials/rtxi-github-rtxi-page.png&quot; class=&quot;img-responsive&quot; /&gt;
		&lt;/a&gt;
	&lt;/div&gt;
	&lt;div class=&quot;col-sm-6 col-xs-12 col-md-5&quot;&gt;
		&lt;a href=&quot;/assets/img/tutorials/rtxi-github-rtxi-issues.png&quot;&gt;&lt;figure&gt;
			&lt;img src=&quot;/assets/img/tutorials/rtxi-github-rtxi-issues.png&quot; class=&quot;img-responsive&quot; /&gt;
		&lt;/figure&gt;&lt;/a&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;h4 id=&quot;write-up-your-issue&quot;&gt;3. Write up your issue.&lt;/h4&gt;
&lt;p&gt;Click the appropriate button for whether you’re opening a new issue or joining an existing thread. Please be as clear and detailed as possible in your comments, as only posting things like “RTXI is crashing” or “X isn’t working” doesn’t help us figure out what the issue is.  &lt;/p&gt;

&lt;p&gt;For your posts, we ask (but don’t require) you do provide the following information when appropriate:  &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;The version of RTXI you are using.&lt;/strong&gt;  If you used a live CD to install RTXI, just say that. If you compiled from source, go to your clone of the RTXI repository and run &lt;code&gt;git log&lt;/code&gt;. The most recent commit will have a string associated with it that looks like a random list of letters. Give us the string.  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Error messages from RTXI in the terminal.&lt;/strong&gt; If there are no error messages, no problem. If RTXI is crashing, it would be incredibly helpful if you used &lt;code&gt;gdb&lt;/code&gt; to provide a backtrace.  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;A clear description of the bug.&lt;/strong&gt; Describe the behavior you expect, the behavior that is happening, and the set of steps that trigger the error.  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Clear issue postings are incredibly helpful for us to start debugging your issues, and it also helps anyone else fully understand the issues you have.  &lt;/p&gt;
</description>
        <pubDate>Thu, 09 Apr 2015 00:00:00 -0400</pubDate>
        <link>http://rtxi.org//docs/troubleshoot/2015/04/09/posting-bugs-and-issues/</link>
        <guid isPermaLink="true">http://rtxi.org//docs/troubleshoot/2015/04/09/posting-bugs-and-issues/</guid>
      </item>
    
      <item>
        <title>How to Use Git</title>
        <description>&lt;p&gt;Below are instructions for installing and using Git. Git is a version control tool that enables users to track revisions and changes in files and coordinate with collaborators. It is often used for software development. &lt;/p&gt;

&lt;p&gt;Unlike many applications, such as Microsoft Word, editing and saving files overwrites data. This makes it difficult to track changes without creating different file names, a process that can get messy very quickly. &lt;/p&gt;

&lt;p&gt;Git takes snapshots of files a user wants to track and maintains a history of changes that have occurred. This makes backtracking and checking revisions a simple process, which is especially helpful for large projects with many developers. It also functions as a collaborative tool by enabling users to make local copies of a common project and modify them as needed. Users track their own changes and those of others, and Git incorporates tools that enable branching and merging of whatever changes people make.  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.phdcomics.com/comics/archive/phd101212s.gif&quot;&gt;
	&lt;img src=&quot;http://www.phdcomics.com/comics/archive/phd101212s.gif&quot; class=&quot;img-responsive&quot; style=&quot;max-height:400px; float:right; margin:10px;&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Installing git is not the same as using GitHub. GitHub uses git, but it is a remote server that users can use as a central location for storing data. See the instructions for &lt;a href=&quot;https://github.com/join&quot;&gt;opening a GitHub account&lt;/a&gt;.  &lt;/p&gt;

&lt;h4 id=&quot;installing-git-on-linux&quot;&gt;Installing Git on Linux&lt;/h4&gt;

&lt;p&gt;Open the terminal. You can do this from within the Applications menu in GNOME or by using the &lt;code&gt;CTRL+Alt+t&lt;/code&gt; shortcut. Enter:  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When telling people to enter commands, it is common practice to use &lt;code&gt;$&lt;/code&gt; at the start of each line to signify that it is to be entered in the terminal. Also, &lt;code&gt;#&lt;/code&gt; is used to signify root permissions rather than having people enter &lt;code&gt;sudo&lt;/code&gt;. In either case, you DO NOT have to enter &lt;code&gt;$&lt;/code&gt; or &lt;code&gt;#&lt;/code&gt; in the terminal. For example, in the above command. just enter the text &lt;code&gt;sudo apt-get install git&lt;/code&gt; and hit &lt;code&gt;ENTER&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;Once Git is installed, configure it with your username and/or email address. This is preferred in development scenarios so that everyone can identify what modifications were made by which user. GitHub also maps Git user email addresses to GitHub accounts. Note that you do not have to give your real name. Any name will do, as all that is needed is a way to identify who has done what. Technically, Git does not check email address validity, either, but for collaborate work, it is best to provide some address so that people can ask each other questions about changes. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config --global user.name &lt;span class=&quot;s1&quot;&gt;&amp;#39;Your name here&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config --global user.email your@address.here&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;git&lt;/code&gt; part of each command specifies that the script that follows contains Git commands. Git provides a library of functions for executing version control. Rather than have them directly incorporated into system libraries, they are made accessible by preceding the command with &lt;code&gt;git&lt;/code&gt;. Therefore, these commands and all other git commands we will use start with &lt;code&gt;git&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The second part, &lt;code&gt;config&lt;/code&gt;, is used to configure information, which is stored in a hidden file. The tag &lt;code&gt;--global&lt;/code&gt; means that the changes to the user configuration are to affect all user repositories. The details are saved in a hidden file called .gitconfig stored at the base of the user’s home directory (&lt;code&gt;~/.gitconfig&lt;/code&gt;). Other options allow for different scopes of the effects of configuration changes. &lt;code&gt;--local&lt;/code&gt; is the default behavior and specifies that changes be written to hidden file in the working directory called &lt;code&gt;.git/config&lt;/code&gt;. You can see what has been set in the config files by running &lt;code&gt;git config --list&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Should you ever need help with a Git command, you can use &lt;code&gt;git help &amp;lt;commandname&amp;gt;&lt;/code&gt; to check the Git documentation in the terminal. For example, if unsure about &lt;code&gt;config&lt;/code&gt;, run &lt;code&gt;git help config&lt;/code&gt;.  &lt;/p&gt;

&lt;h3 id=&quot;using-local-repositories&quot;&gt;Using Local Repositories&lt;/h3&gt;

&lt;h4 id=&quot;initialization&quot;&gt;Initialization&lt;/h4&gt;

&lt;p&gt;Git enables users to track local changes and development paths. First, go the base of your home directory and create some new directories:  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir plugins
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;plugins
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir practice
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;practice
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, from within the plugins directory, run:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git init&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;!--
&lt;a href=&quot;/assets/img/tutorials/git-tutorial-1.png&quot;&gt;
	&lt;img src=&quot;/assets/img/tutorials/git-tutorial-1.png&quot; class=&quot;img-responsive&quot;&gt;
&lt;/a&gt;
--&gt;

&lt;p&gt;This command specifies that the directory is to be treated as a Git repository. By default, Git does not track &lt;em&gt;any&lt;/em&gt; files. User must enable it in a directory of their choosing. Once executed, this function creates a hidden directory called &lt;code&gt;.git/&lt;/code&gt; that stores information regarding the repository contained in the directory. &lt;/p&gt;

&lt;!--
&lt;a href=&quot;/assets/img/tutorials/git-tutorial-2.png&quot;&gt;
	&lt;img src=&quot;/assets/img/tutorials/git-tutorial-2.png&quot; class=&quot;img-responsive&quot;&gt;
&lt;/a&gt;
--&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Git exists as a version control system. It is not advisable to use it for backing up big files, such as videos, binaries, etc. The entire process gets encumbered quickly. &lt;/p&gt;

&lt;h4 id=&quot;a-nameaddaadding-files-to-the-staging-area&quot;&gt;&lt;a name=&quot;add&quot;&gt;&lt;/a&gt;Adding Files to the Staging Area&lt;/h4&gt;

&lt;p&gt;The directory is currently empty, so create some files:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;touch file1.txt
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;touch file2.txt
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;touch file3.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These files have been added to the repository, or in Git terminology, the &lt;strong&gt;working tree&lt;/strong&gt;. The working tree refers to all of the files that originate from the base of the directory, which in this case is &lt;code&gt;~/plugins&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;By default, Git does not track files that are added to the directory. Users have to specify that they be tracked. This is done by the &lt;code&gt;add&lt;/code&gt; command. Git does, though tell what files are and are not being tracked. Simply use &lt;code&gt;git status&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add file1.txt file2.txt file3.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;git add&lt;/code&gt; adds the files to what is called the &lt;strong&gt;staging area&lt;/strong&gt;. Basically, this command generates a snapshot of the files and stores them without adding them to the permanent version history. In other words, Git is aware of the files, but it has not added them to the permanent version history. Basically, git has a 2-stage revision process. The first is to send modified or new files to the staging area, and the second is to commit them to the permanent version history. This has its advantages in that it enables users to add files to a repository as a group that together functions properly. Reverting from one set of changes to another is simply a process of switching to another snapshot in the permanent history. This process is explained later. &lt;/p&gt;

&lt;p&gt;To show what files are in the stating area, use:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;!--
&lt;a href=&quot;/assets/img/tutorials/git-tutorial-3.png&quot;&gt;
	&lt;img src=&quot;/assets/img/tutorials/git-tutorial-3.png&quot; class=&quot;img-responsive&quot;&gt;
&lt;/a&gt;
--&gt;

&lt;p&gt;If needed, it is possible to unstage files that were added with &lt;code&gt;git add&lt;/code&gt;. Git gives the user the command 
&lt;code&gt;git rm --cached &amp;lt;filename&amp;gt;&lt;/code&gt;. Try it on one of the files and see the changes made to the staging area. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git rm --cached file1.txt
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;!--
&lt;a href=&quot;/assets/img/tutorials/git-tutorial-4.png&quot;&gt;
	&lt;img src=&quot;/assets/img/tutorials/git-tutorial-4.png&quot; class=&quot;img-responsive&quot;&gt;
&lt;/a&gt;
--&gt;

&lt;p&gt;The following assumes that all three files are added to the staging area. You can add all files to the staging area by running &lt;code&gt;git add -A&lt;/code&gt;. &lt;/p&gt;

&lt;h4 id=&quot;a-namecommitacommiting-files&quot;&gt;&lt;a name=&quot;commit&quot;&gt;&lt;/a&gt;Commiting Files&lt;/h4&gt;

&lt;p&gt;With the files added to the staging area, the next step is to add them to the permanent version history. In Git, this process is called a &lt;strong&gt;commit&lt;/strong&gt;. Use the &lt;code&gt;commit&lt;/code&gt; command. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit file1.txt file2.txt file3.txt -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;First commit&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;commit&lt;/code&gt; command adds files in the staging area to the repository. Each commit requires a message that is intended to describe the changes that took place. This can be done in the command line by using &lt;code&gt;-m&lt;/code&gt; followed by the message in quotation marks. If this is omitted, Git defaults to a text editor where users can type the message. The &lt;code&gt;commit&lt;/code&gt; command is completed when the user saves the message and exits the editor.  &lt;/p&gt;

&lt;p&gt;If you opt to not specify the filenames for the commit, git will commit all the files in the staging area.  &lt;/p&gt;

&lt;p&gt;Because all the files in the staging area were committed in the last command, there are all removed from the staging area. You can check with &lt;code&gt;git status&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;The version history is in essence a list of commits. To view the complete history of the project, use:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This outputs a list of all the commits, when they were made, the author, the commit messages, and other information. The string at the top of seemingly random letters is an encrypted hash of the changes that were made. A hash is a string that encodes data and is produced by a hash function. Ideally, a hash function is implemented such that a small change in the data it encodes results in a large, unpredictable change in the hash. This enables users to check the file’s integrity and makes it exceedingly difficult to alter the commit history.  &lt;/p&gt;

&lt;!--
&lt;a href=&quot;/assets/img/tutorials/git-tutorial-5.png&quot;&gt;
	&lt;img src=&quot;/assets/img/tutorials/git-tutorial-5.png&quot; class=&quot;img-responsive&quot;&gt;
&lt;/a&gt;
--&gt;

&lt;h4 id=&quot;a-nameundoaoptional-undo-a-commit&quot;&gt;&lt;a name=&quot;undo&quot;&gt;&lt;/a&gt;(Optional) Undo a Commit&lt;/h4&gt;

&lt;p&gt;If you ever commit something and wish to revert your changes, use the &lt;code&gt;reset&lt;/code&gt; command. There are several options. The first is:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git reset --hard HEAD~1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This command erases &lt;strong&gt;everything&lt;/strong&gt; that was altered after the previous commit and sets the working tree to the previous commit. The &lt;code&gt;--hard&lt;/code&gt; induces the erasure, and &lt;code&gt;HEAD~1&lt;/code&gt; moves to the previous commit. &lt;code&gt;HEAD&lt;/code&gt; is a pointer that Git uses to point to a specific commit in a branch. &lt;code&gt;HEAD&lt;/code&gt; by default points to the latest commit, so to access previous ones, use &lt;code&gt;~X&lt;/code&gt; where X is the number of commits ago you want to go. &lt;/p&gt;

&lt;p&gt;Be very careful when using &lt;code&gt;--hard&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The second option:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git reset --mixed HEAD~1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;-OR-&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git reset HEAD~1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This file preserves the changes made but reverts the HEAD pointer back one commit. The changes are unstaged, so the working directory matches the previous commit. &lt;/p&gt;

&lt;p&gt;The last option:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git reset --soft HEAD~1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The only change is that the most recent commit is reversed. The staging area is the same; it reflects the changes that have been made between the commit to be erased and its predecessor. This option exactly reverses the effects of a &lt;code&gt;git commit&lt;/code&gt; command. &lt;/p&gt;

&lt;p&gt;The following assumes that the commit has not been reversed. All three files are committed in the repository. &lt;/p&gt;

&lt;h4 id=&quot;a-namebranchabranching-repositories&quot;&gt;&lt;a name=&quot;branch&quot;&gt;&lt;/a&gt;Branching Repositories&lt;/h4&gt;

&lt;p&gt;Now that a commit has been made, branch off and create a new working tree. Currently, HEAD points to the last commit of the original branch, called &lt;code&gt;master&lt;/code&gt;. This is the default name for a new git repository. It is generally best practice to branch off of master to make changes and then merge changes back to master once they have been thoroughly audited. That way, whatever code is in the master branch is guaranteed to work.  &lt;/p&gt;

&lt;p&gt;Create a branch called &lt;code&gt;testing&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch testing&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This creates a new branch called &lt;code&gt;testing&lt;/code&gt;. By default, it copies the state pointed to by HEAD, but it is possible to branch off of previous commits. To list the available branches, use &lt;code&gt;git branch&lt;/code&gt;. To switch to the newly created branch, use:  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout testing&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, HEAD is pointing to &lt;code&gt;testing&lt;/code&gt; instead of &lt;code&gt;master&lt;/code&gt;. Any commits made will be applied to &lt;code&gt;testing&lt;/code&gt; as long as it is checked out. &lt;/p&gt;

&lt;!--
&lt;a href=&quot;/assets/img/tutorials/git-tutorial-6.png&quot;&gt;
	&lt;img src=&quot;/assets/img/tutorials/git-tutorial-6.png&quot; class=&quot;img-responsive&quot;&gt;
&lt;/a&gt;
--&gt;

&lt;h4 id=&quot;a-namecommitbranchacommiting-branches&quot;&gt;&lt;a name=&quot;commitbranch&quot;&gt;&lt;/a&gt;Commiting Branches&lt;/h4&gt;

&lt;p&gt;Change the current files. This command will add text to the files saying, “This is &lt;filename&gt;&quot;. You can use `more &lt;filename&gt;` or `cat &lt;filename&gt;` to output the contents of a file into the terminal. &lt;/filename&gt;&lt;/filename&gt;&lt;/filename&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;find . -maxdepth &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; -type f &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; xargs -I &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; bash -c &lt;span class=&quot;s2&quot;&gt;&amp;quot;echo &amp;#39;This is &amp;#39;{} &amp;gt; {}&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that the files have been altered, run &lt;code&gt;git status&lt;/code&gt; to see what Git has noticed. Stage the changes and commit them:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add .
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit . -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;First Branch Commit&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;.&lt;/code&gt; operator causes commands to affect all files in a directory. Using it is easier than typing individual file names. &lt;/p&gt;

&lt;!--
&lt;a href=&quot;/assets/img/tutorials/git-tutorial-7.png&quot;&gt;
	&lt;img src=&quot;/assets/img/tutorials/git-tutorial-7.png&quot; class=&quot;img-responsive&quot;&gt;
&lt;/a&gt;
--&gt;

&lt;h4 id=&quot;a-namecompareacomparing-branches&quot;&gt;&lt;a name=&quot;compare&quot;&gt;&lt;/a&gt;Comparing Branches&lt;/h4&gt;

&lt;p&gt;Now that &lt;code&gt;master&lt;/code&gt; and &lt;code&gt;testing&lt;/code&gt; differ with one another, switch between them to see the differences.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; xargs cat
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout master
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; xargs cat&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Individually looking through files in different branches can be cumbersome. To output the differences directly, use the &lt;code&gt;diff&lt;/code&gt; command. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git diff master testing&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The output should look like:&lt;/p&gt;

&lt;!--
&lt;a href=&quot;/assets/img/tutorials/git-tutorial-8.png&quot;&gt;
	&lt;img src=&quot;/assets/img/tutorials/git-tutorial-8.png&quot; class=&quot;img-responsive&quot;&gt;
&lt;/a&gt;
--&gt;

&lt;h4 id=&quot;a-namemergeamerging-branches&quot;&gt;&lt;a name=&quot;merge&quot;&gt;&lt;/a&gt;Merging Branches&lt;/h4&gt;

&lt;p&gt;Now, merge the changes in &lt;code&gt;testing&lt;/code&gt; to &lt;code&gt;master&lt;/code&gt;. Check out the &lt;code&gt;master&lt;/code&gt; branch and use the &lt;code&gt;merge&lt;/code&gt; command.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout master
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge testing&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will see an output that summarizes the changes. The &lt;code&gt;merge&lt;/code&gt; command creates a new commit that follows the previous version of &lt;code&gt;master&lt;/code&gt;. &lt;/p&gt;

&lt;!--
&lt;a href=&quot;/assets/img/tutorials/git-tutorial-9.png&quot;&gt;
	&lt;img src=&quot;/assets/img/tutorials/git-tutorial-9.png&quot; class=&quot;img-responsive&quot;&gt;
&lt;/a&gt;
--&gt;

&lt;p&gt;If the merge is successful, there is no need for the &lt;code&gt;testing&lt;/code&gt; branch. Delete it. Make sure that the &lt;code&gt;testing&lt;/code&gt; branch isn’t currently checked out.  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch -d testing&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;a-namerreposausing-remote-repositories&quot;&gt;&lt;a name=&quot;rrepos&quot;&gt;&lt;/a&gt;Using Remote Repositories&lt;/h3&gt;

&lt;p&gt;Remote repositories refer to storage locations outside a user’s local repository. The remote in this example is GitHub, and the repository we’ll be using is for the &lt;a href=&quot;https://github.com/rtxi/plugin-template&quot;&gt;plugin template&lt;/a&gt;. If you want to have your own remote repository on GitHub, you will need to create an account with them and using their website to initialize the repository. &lt;/p&gt;

&lt;h4 id=&quot;a-namecloneacloning-a-github-repository&quot;&gt;&lt;a name=&quot;clone&quot;&gt;&lt;/a&gt;Cloning a GitHub Repository&lt;/h4&gt;

&lt;p&gt;The format for cloning repositories from GitHub is: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/&amp;lt;username&amp;gt;/&amp;lt;repository-name&amp;gt;.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To clone from our repositories, the username is &lt;code&gt;rtxi&lt;/code&gt; and the repositories are all listed on https://github.com/rtxi. To install the plugin template:  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/ &lt;span class=&quot;c&quot;&gt;# this line isn&amp;#39;t really needed&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/rtxi/plugin-template.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;plugin-template&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In addition to the files copied from GitHub, Git stores the address of the remote repository. By default, the name is &lt;code&gt;origin&lt;/code&gt;. See details on remote repositories with &lt;code&gt;git remote -v&lt;/code&gt;. &lt;/p&gt;

&lt;h4 id=&quot;a-namepushapushing-to-a-remote&quot;&gt;&lt;a name=&quot;push&quot;&gt;&lt;/a&gt;Pushing to a Remote&lt;/h4&gt;

&lt;p&gt;Make some changes to the directory. Add some files, edit them, etc. Then, stage and commit them. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;touch file1 file2 file3
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add .
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit . &lt;span class=&quot;s2&quot;&gt;&amp;quot;Local commit to push to remote repository&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You will not actually be able to execute the command below successfully. We don’t allow everyone to push to our repositories. This is what you’d do, though, if you could. &lt;/p&gt;

&lt;p&gt;Now, send these changes to the remote. The command Git uses for this is &lt;code&gt;push&lt;/code&gt;. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push https://github.com/&amp;lt;username&amp;gt;/plugin-template.git master &lt;span class=&quot;c&quot;&gt;# will fail&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Git pushes the changes to the master branch of the remote repository referenced by the URL. Git also supports aliases for remote URLs. By default, the URL from which you clone a repository is saved as &lt;code&gt;origin&lt;/code&gt;. You can view the remotes tracked by a repository by running &lt;code&gt;git remote -v&lt;/code&gt;.  &lt;/p&gt;

&lt;h4 id=&quot;a-namepullapulling-changes-from-a-remote&quot;&gt;&lt;a name=&quot;pull&quot;&gt;&lt;/a&gt;Pulling Changes from a Remote&lt;/h4&gt;

&lt;p&gt;Just as one can push changes from a local machine to a remote, it is possible to ‘pull’ changes back from the remote to the local machine. This comes into play when modifying the same project on several machines or by several people. To pull the code and automatically merge the differences, use:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git pull origin&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you want to observe the changes but not merge them, use:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git fetch origin&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This command fetches the changes from the remote repository for the user to compare with files on the local machine. Once they are determined to be safe for merging, enter the following from within the directory to which changes are to be merged:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge &amp;lt;fetchedremote&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can use this method to keep your modules and RTXI up to date.  &lt;/p&gt;

&lt;h3 id=&quot;a-namesummaryasummary&quot;&gt;&lt;a name=&quot;summary&quot;&gt;&lt;/a&gt;Summary&lt;/h3&gt;

&lt;p&gt;The above tutorial is a very basic introduction to Git. Git has many functions, and many of them overlap in their functionality. As such, there are often many ways to implement what was described above.  &lt;/p&gt;

&lt;p&gt;Should you need more detail, the &lt;a href=&quot;http://git-scm.com/documentation&quot;&gt;Git documentation&lt;/a&gt; is an excellent place to start. Additional help can be found throughout the web:&lt;br /&gt;
 - An &lt;a href=&quot;http://try.github.io/levels/1/challenges/1&quot;&gt;interactive tutorial&lt;/a&gt; for Git syntax.&lt;br /&gt;
 - A &lt;a href=&quot;http://www.vogella.com/tutorials/Git/article.html&quot;&gt;user-made tutorial&lt;/a&gt;&lt;br /&gt;
 - A detailed site by Atlassian with &lt;a href=&quot;https://www.atlassian.com/git/&quot;&gt;tutorials on Git and workflow&lt;/a&gt;  &lt;/p&gt;
</description>
        <pubDate>Tue, 07 Apr 2015 00:00:00 -0400</pubDate>
        <link>http://rtxi.org//docs/tutorials/2015/04/07/how-to-use-git/</link>
        <guid isPermaLink="true">http://rtxi.org//docs/tutorials/2015/04/07/how-to-use-git/</guid>
      </item>
    
      <item>
        <title>Setting a Default Boot Kernel</title>
        <description>&lt;p&gt;It can get annoying choosing the real-time kernel from the submenu every time you boot your computer, especially if you miss the timing and it boots generic Linux.  &lt;/p&gt;

&lt;p&gt;By default, the GRUB bootloader sorts your installed kernels in descending version based on the kernel version number, and boots from the first one. You can save yourself some frustration by changing GRUB to boot from the real-time kernel by default.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is only for convenience. It has no effect on real-time performance or the functioning of RTXI.  &lt;/p&gt;

&lt;p&gt;While it is possible to specify a &lt;em&gt;specific&lt;/em&gt; kernel, it is much easier to tell GRUB to use the kernel used last time. To make GRUB do this, open &lt;code&gt;/etc/default/grub&lt;/code&gt; as root and make the following edits:  &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Change &lt;code&gt;GRUB_DEFAULT=0&lt;/code&gt; to &lt;code&gt;GRUB_DEFAULT=saved&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Add a new line that says &lt;code&gt;GRUB_SAVEDEFAULT=true&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Save your edits (again, you need to be root), and update GRUB by running: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo update-grub&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;From now on, GRUB will boot the last-used kernel by default. If you want to choose a different one, select it manually.  &lt;/p&gt;
</description>
        <pubDate>Wed, 01 Apr 2015 00:00:00 -0400</pubDate>
        <link>http://rtxi.org//docs/tutorials/2015/04/01/setting-a-default-boot-kernel/</link>
        <guid isPermaLink="true">http://rtxi.org//docs/tutorials/2015/04/01/setting-a-default-boot-kernel/</guid>
      </item>
    
      <item>
        <title>Why won&#39;t RTXI open?</title>
        <description>&lt;p&gt;There are several reasons for RTXI to not open.&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;&lt;strong&gt;RTXI is already running.&lt;/strong&gt;
		&lt;p&gt;If you run &lt;code&gt;rtxi&lt;/code&gt; in the terminal and get this output, RTXI is already running:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo rtxi
../src/rt_os-xenomai.cpp:123:RT::OS::createTask : failed to create task
../src/rt.cpp:157:RT::System::System : failed to create realtime thread&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

		&lt;p&gt;The error happens because only one instance of RTXI can be running on the system. Check who is running it by entering:&lt;/p&gt; 

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ps ax -o euser,comm &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep rtxi&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

		&lt;p&gt;If the command shows someone else&#39;s username, that means they have RTXI open. Bug them about closing it or close it yourself by running &lt;code&gt;$ sudo pkill rtxi&lt;/code&gt;. Note that workspaces, open files, etc. will &lt;strong&gt;not&lt;/strong&gt; be saved when force-closing RTXI. 
		&lt;/p&gt;
		&lt;p&gt;If it&#39;s your username, RTXI may not have exited cleanly from sometime earlier. You can run &lt;code&gt;$ sudo pkill rtxi&lt;/code&gt; for this case, too.
		&lt;/p&gt;
		&lt;p&gt;Now, you should be able to run RTXI.&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;You aren&#39;t using a real-time kernel.&lt;/strong&gt;&lt;/li&gt;
		&lt;p&gt;Check the kernel you are using. Run this in the terminal:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;uname -r&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

		&lt;p&gt;You will get one line of output that tells you what kernel you are using. If it has the word &quot;xenomai&quot; in it, then it&#39;s a real-time kernel. If not, then it isn&#39;t.
		&lt;/p&gt; 
		&lt;p&gt;If it&#39;s not a real-time kernel, you&#39;ll have to reboot your computer and pick a real-time kernel in the GRUB boot menu that pops up. If you don&#39;t see it, enter the &quot;Advanced options...&quot; submenu and look there.
		&lt;/p&gt;
		&lt;p&gt;Also, see &lt;a href=&quot;/docs/tutorials/2015/04/01/setting-a-default-boot-kernel/&quot;&gt;this page about setting a default kernel.

&lt;/a&gt;&lt;/p&gt;&lt;/ol&gt;
</description>
        <pubDate>Wed, 01 Apr 2015 00:00:00 -0400</pubDate>
        <link>http://rtxi.org//docs/faqs/2015/04/01/rtxi-doesn't-open/</link>
        <guid isPermaLink="true">http://rtxi.org//docs/faqs/2015/04/01/rtxi-doesn't-open/</guid>
      </item>
    
      <item>
        <title>RTXI 2015 Deadline Approaching</title>
        <description>&lt;p&gt;The deadline for registering for the RTXI 2015 conference is fast approacing. Register now to book your position here. Noteworthy dates:  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Registration:&lt;/strong&gt; April 3&lt;br /&gt;
&lt;strong&gt;Hotel:&lt;/strong&gt; April 15  &lt;/p&gt;

&lt;p&gt;The conference is May 7-8 at the Georgia Academy of Medicine. Registration is $75 for students and $125 for everyone else. Fee waivers are liberally available upon request.  &lt;/p&gt;
</description>
        <pubDate>Fri, 27 Mar 2015 00:00:00 -0400</pubDate>
        <link>http://rtxi.org//news/2015/03/27/rtxi-2015-registration-deadline-approaching/</link>
        <guid isPermaLink="true">http://rtxi.org//news/2015/03/27/rtxi-2015-registration-deadline-approaching/</guid>
      </item>
    
      <item>
        <title>Linux Freezes after Reboot</title>
        <description>&lt;p&gt;If you reboot the computer and the computer displays a laggy log-in screen, it’s probably because kexec-tools are handling reboots. The utility normally is used to perform ‘warm reboots,’ which is when the computer reloads a kernel without fully shutting the system down. The lag is probably because kexec-tools is rebooting to a non-RT kernel. The easiest thing to do here is to disable kexec-tools from handling reboots. To do so:  &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open /etc/default/kexec (as root).&lt;/li&gt;
  &lt;li&gt;Change &lt;code&gt;LOAD_KEXEC&lt;/code&gt; from &lt;code&gt;true&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Save and exit. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, kexec-tools will no longer handle reboots, and your system reboot as one would expect. &lt;/p&gt;
</description>
        <pubDate>Mon, 02 Mar 2015 00:00:00 -0500</pubDate>
        <link>http://rtxi.org//docs/troubleshoot/2015/03/02/linux-frozen-after-reboot/</link>
        <guid isPermaLink="true">http://rtxi.org//docs/troubleshoot/2015/03/02/linux-frozen-after-reboot/</guid>
      </item>
    
      <item>
        <title>Using Graphics Cards</title>
        <description>&lt;p&gt;Choosing graphics cards can be a thorny issue in standard Linux alone, let alone real-time Linux. Often, open-source drivers lag behind proprietary ones in terms of compatibility with newer hardware and displays. The two main types, AMD and Nvidia, are supported for the most part within Linux.  &lt;/p&gt;

&lt;p&gt;For RTXI, we strongly encourage you to use the open-source drivers. Nouveau is the open-source one for Nvidia cards, and radeon is for AMD ones. No configuration or input on your part is needed to use them. When you install Linux and boot, your kernel will detect the graphics hardware and load the corresponding driver. You can check to see if your driver is loaded by running:  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;lsmod &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep &lt;span class=&quot;s2&quot;&gt;&amp;quot;radeon\|nvidia&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The reason we use open-source drivers is that they use the kernel to directly leverage the graphics card to compute things like the UI and desktop. Proprietary drivers, while technically doing the same thing, function differently and can degrade real-time performance by causing latencies to spike to as high as 100us on some machines. Skipping the drivers altogether forces the CPU to compute the UI, which when coupled with the RT kernel, will make the UI slow and laggy and the real-time performance poorer.  &lt;/p&gt;

&lt;p&gt;Here are some guidelines for using graphics cards: &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Newer cards are less likely to be supported by open-source drivers.  &lt;/li&gt;
  &lt;li&gt;AMD provides better support for its &lt;strong&gt;open-source&lt;/strong&gt; radeon driver than Nvidia does for nouveau.  &lt;/li&gt;
  &lt;li&gt;Nvidia’s &lt;strong&gt;proprietary driver&lt;/strong&gt; performs better than AMD’s proprietary driver (fglrx) and generally provides better support for newer hardware.  &lt;/li&gt;
  &lt;li&gt;If you have an AMD card, use it. If you have an Nvidia one, try it. Tell us if you have issues. We want to keep track of what works and what doesn’t.  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Lastly, if you have issues with your display looking weird or distorted, it’s probably your graphics card. Check our graphics troubleshooting page for suggestions on what to do or browse though forums online. Someone’s probably had the same issue as you at some point.  &lt;/p&gt;
</description>
        <pubDate>Mon, 23 Feb 2015 00:00:00 -0500</pubDate>
        <link>http://rtxi.org//docs/tutorials/2015/02/23/using-graphics-cards/</link>
        <guid isPermaLink="true">http://rtxi.org//docs/tutorials/2015/02/23/using-graphics-cards/</guid>
      </item>
    
      <item>
        <title>My System Is Frozen or Slow!</title>
        <description>&lt;p&gt;This issue can be caused by many tings, and getting to its specific cause will require patience. Here are some things to look for: &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;When does the system freeze or slow down?&lt;br /&gt;
    &lt;ol&gt;
      &lt;li&gt;Does it freeze after you pick a kernel in the GRUB menu?  &lt;/li&gt;
      &lt;li&gt;Does the freeze affect all kernels? Or is it just the real-time one(s)?  &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;What graphics card are you using?&lt;br /&gt;
    &lt;ol&gt;
      &lt;li&gt;Is it Nvidia or AMD?  &lt;/li&gt;
      &lt;li&gt;Are you using open-source or proprietary drivers?  &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Are the DAQ drivers loaded? Open the Control Panel module in RTXI and see if the “analogy0” channel is open. If not, the drivers aren’t detecting your DAQ. (Applies to RT kernels. Non-RT kernels can’t touch the DAQ.)  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The issues could be caused by several issues, like your graphics card not being fully supported, the DAQ driver interfering with framebuffers, etc. One thing that we’ve noticed while debugging our own systems is that on some Nvidia cards, the nouveau driver is incompatible with analogy, causing the GUI to freeze. One almost fix to this is to disable kernel mode setting. Here’s now to do it:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; Open the /etc/default/grub file as root.&lt;/li&gt;
&lt;li&gt; Edit the GRUB_CMDLINE_LINUX_DEFAULT line to read:  

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;GRUB_CMDLINE_LINUX_DEFAULT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;quiet splash nomodeset i915.modeset=0 nouveau.modeset=0&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/li&gt;
&lt;li&gt; Update GRUB.  

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo update-grub&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This prevents the kernel from using the nvidia card to compute the UI. Unfortunately, one side-effect is to offload the UI to the CPU, making it run slower and degrading real-time performance.  &lt;/p&gt;

&lt;p&gt;To undo this change, just remove the edits made the the /etc/default/grub file and run &lt;code&gt;update-grub&lt;/code&gt; again.  &lt;/p&gt;
</description>
        <pubDate>Mon, 23 Feb 2015 00:00:00 -0500</pubDate>
        <link>http://rtxi.org//docs/troubleshoot/2015/02/23/system-frozen-or-slow/</link>
        <guid isPermaLink="true">http://rtxi.org//docs/troubleshoot/2015/02/23/system-frozen-or-slow/</guid>
      </item>
    
      <item>
        <title>RTXI 2015 Registration Open!</title>
        <description>&lt;p&gt;Just reminding everyone that registration for RTXI 2015 is now open! Check out our &lt;a href=&quot;/conference/&quot;&gt;conference page&lt;/a&gt; to learn about our upcoming conference. &lt;a href=&quot;http://petitinstitute.gatech.edu/rtxi-2015-workshop&quot;&gt;Registration is open&lt;/a&gt; until April 1st at 5:00 PM Eastern Time.  &lt;/p&gt;
</description>
        <pubDate>Wed, 21 Jan 2015 00:00:00 -0500</pubDate>
        <link>http://rtxi.org//news/2015/01/21/rtxi-2015-registration-is-open/</link>
        <guid isPermaLink="true">http://rtxi.org//news/2015/01/21/rtxi-2015-registration-is-open/</guid>
      </item>
    
      <item>
        <title>Why are there negative latencies?</title>
        <description>&lt;p&gt;Negative latencies mean that the latency test has not been properly calibrated. The test calculates latencies based on when tasks are expected to be completed, with some overhead going toward computing the timer. To avoid including the time it takes to compute the timer, xenomai offsets the measured latency with a static value, written in nanoseconds and stored in &lt;code&gt;/proc/xenomai/latency&lt;/code&gt;. If the value is negative, then xenomai is overcompensating.  &lt;/p&gt;

&lt;p&gt;You can correct this behavior by running (as root):  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# echo 0 &amp;gt; /proc/xenomai/latency&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What this means is that the latency test will not try to factor out the time to compute the timer. &lt;/p&gt;
</description>
        <pubDate>Tue, 20 Jan 2015 00:00:00 -0500</pubDate>
        <link>http://rtxi.org//docs/faqs/2015/01/20/why-are-there-negative-latencies/</link>
        <guid isPermaLink="true">http://rtxi.org//docs/faqs/2015/01/20/why-are-there-negative-latencies/</guid>
      </item>
    
      <item>
        <title>Register for RTXI 2015</title>
        <description>&lt;p&gt;If you haven’t done so already, check out our &lt;a href=&quot;/conference/&quot;&gt;conference page&lt;/a&gt; to learn about our upcoming conference. Registration is almost open. We just need to get the payment page running.  &lt;/p&gt;
</description>
        <pubDate>Mon, 22 Dec 2014 00:00:00 -0500</pubDate>
        <link>http://rtxi.org//news/2014/12/22/register-for-RTXI-2015/</link>
        <guid isPermaLink="true">http://rtxi.org//news/2014/12/22/register-for-RTXI-2015/</guid>
      </item>
    
      <item>
        <title>Let There Be News!</title>
        <description>&lt;p&gt;There is now a news section on the home page! Look in future for an RSS feed.   &lt;/p&gt;

&lt;p&gt;This page is more for me to test that my automation ‘scripts’ are working than to tell you anything remotely substantive.  &lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I think I’ll add another news post after this one just to check if the spacing works out alright.  &lt;/p&gt;
</description>
        <pubDate>Mon, 22 Dec 2014 00:00:00 -0500</pubDate>
        <link>http://rtxi.org//news/2014/12/22/let-there-be-news/</link>
        <guid isPermaLink="true">http://rtxi.org//news/2014/12/22/let-there-be-news/</guid>
      </item>
    
      <item>
        <title>New Website</title>
        <description>&lt;p&gt;We now have a new website. It’s not quite feature-rich yet, but it’s a nice, fresh site to coincide with the long-planned release of RTXI 2.0. Look here in the future for all documentation, tutorials, videos, etc. related to using RTXI and closed-loop, real-time electrophysiology in general. 
While not complete, the new site got a few things ready that we think you’ll like:  &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;/modules/&quot;&gt;&lt;strong&gt;The Modules Page:&lt;/strong&gt;&lt;/a&gt; the old site contained a modules page that was perpetually out-of-date relative to current RTXI development. The new page is autogenerated by pulling directly from our GitHub repos, so they’ll stay up-to-date. It also has a search feature absent from GitHub’s own site.  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/papers/&quot;&gt;&lt;strong&gt;The Papers Page:&lt;/strong&gt;&lt;/a&gt; built with the restraint of a 5-year-old kid with a free pass to an all-you-use Javascript plugin candy store, the papers page will give you picture of just how many people have used RTXI over the years and what they did with it.  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/docs/&quot;&gt;&lt;strong&gt;Documentation:&lt;/strong&gt;&lt;/a&gt; all our documentation is easier to find and all accessible from a single page. At any rate, it’ll be easier to find what you need this way than it would be to search through pages of Wordpress blog posts.  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;It’s Lighter and Faster:&lt;/strong&gt; this is mostly for my gratification, but the new site is leaner and faster than the old one.  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If there’s something on the old site that you used that’s gone now, just let us know. We’ll get it back for you. There are &lt;a href=&quot;/contact/&quot;&gt;lots of ways to contact us&lt;/a&gt;. Thanks.&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Dec 2014 00:00:00 -0500</pubDate>
        <link>http://rtxi.org//news/2014/12/10/new-website/</link>
        <guid isPermaLink="true">http://rtxi.org//news/2014/12/10/new-website/</guid>
      </item>
    
      <item>
        <title>What Is Real-time Computing?</title>
        <description>&lt;p&gt;In general, an operating system is responsible for managing the hardware resources of a computer. A real-time operating system is a refinement in that it perfoms tasks with extreme precision and reliability. This is important in automated process control systems where a delay can cause a critical failure of the overall system.  &lt;/p&gt;

&lt;h4 id=&quot;hard-vs-soft-real-time&quot;&gt;Hard vs. Soft Real-time&lt;/h4&gt;

&lt;p&gt;To be considered real-time, an operating system must have a known maximum time for each of the operations that it performs. Operating systems that can absolutely guarantee a maximum time for these operations are called hard real-time, while operating systems that can only guarantee a maximum most of the time are considered soft real-time. The idea is that in a hard real-time system, the completion of an operation after its deadline is considered useless, and in the most non-permissive of systems, for instance car brakes, missed deadlines constitute system failure. In contrast, a soft real-time system can handle lateness, usually by pausing processes based on some execution priority scheme.  &lt;/p&gt;

&lt;p&gt;Most operating systems allow programmers to specify a priority for the overall application and even for different tasks within the application, called threads. These priorities are handled by the operating system’s scheduler, which decides how to allocate system resources when many tasks need to be executed more or less simultaneously and whether or not to interrupt a task when those with higher priority are waiting.  &lt;/p&gt;

&lt;p&gt;In practice, general-purpose operating systems, such as Microsoft Windows, are optimized to run a variety of applications and processes simultaneously. Windows uses system interrupts to distribute processor time between different tasks that must access the same shared resources. Standard Linux does the same. It can be made to run in real-time, though, by inserting a small high-priority, real-time microkernel between the hardware and standard Linux kernel. The microkernel’s scheduler traps any software-related system interrupts that would otherwise preempt system resources from any real-time tasks it executes, thereby guaranteeing that real-time tasks are not interrupted and execute with higher priority than normal Linux processes. RTXI uses a real-time thread for actual process control and a non-realtime thread handled by standard Linux for the graphical user interface.  &lt;/p&gt;

&lt;h4 id=&quot;what-real-time-can-do&quot;&gt;What Real-time Can Do&lt;/h4&gt;

&lt;p&gt;A real-time process control system must constantly process a set of inputs and produce a set of outputs. Real-time applications must be carefully programmed to ensure that the total amount of time spent accessing the hardware, sampling the inputs, computing the outputs, and interacting with any user interface is no longer than the specified cycle time.&lt;/p&gt;

&lt;p&gt;Xenomai provides several benchmark tests for system latencies. RTXI also has a Performance Measurement module that determines average and worst case real-time performance within RTXI. Maximal performance depends mostly on the motherboard and supporting chipset, not as much on processor speed. Instead, the processor determines the complexity of the models the system can solve within the constraints of some underlying real-time computation rate. Faster processors allow more instructions to be executed per computational cycle. For example, a complex model may require too much computation to work on a 200MHz machine, but will run at 20kHz on a 2GHz machine, even though a much simpler model runs at 50kHz on both. A slower processor simply cannot execute instructions in complex models quickly enough.  &lt;/p&gt;

&lt;h4 id=&quot;measuring-performance&quot;&gt;Measuring Performance&lt;/h4&gt;

&lt;p&gt;The ‘speed’ of a platform usually refers to three attributes: time step, jitter, and latency. The time step is the target period of the system. Ideally, this value would be infinitesimal so that we would be able to acquire and output all possible frequencies; however, that cannot be realized in practice because a set amount of processing time is needed for input-output calculations. This set time provides a lower bound for overall computation time, but systems get pulled away from it due to the costs mentioned earlier. Essentially, the actual observable time step is a random variable centered about a mean target time step. The second term, jitter, describes the variation around the mean, and is a direct result of the non-deterministic nature of modern computer architectures (e.g. cache misses, bus contention, and super-scalar execution). Typically, solutions based on general purpose operating systems will always suffer from high levels of jitter because the underlying system is designed to distribute clock cycles fairly among many competing processes. Latency, the time between receiving an input and updating the corresponding physical output channel roughly determines the lower bound on time step. Latency exists because it takes a finite amount of time to perform analog to digital conversion, do some computation, and convert back from digital to analog.  &lt;/p&gt;
</description>
        <pubDate>Sat, 06 Dec 2014 00:00:00 -0500</pubDate>
        <link>http://rtxi.org//docs/tutorials/2014/12/06/what-is-real-time-computing/</link>
        <guid isPermaLink="true">http://rtxi.org//docs/tutorials/2014/12/06/what-is-real-time-computing/</guid>
      </item>
    
      <item>
        <title>RTXI Architecture</title>
        <description>&lt;p&gt;RTXI uses a two-thread architecture consisting of a real-time (RT) thread and a non-real-time user interface (UI) thread. RTXI can run on single or multiprocessor computers. RTXI consists of both system and custom user modules, each of which spans both threads. RTXI modules communicate and share data in real-time using a system of signals and slots that supports synchronous scheduling, as well as asynchronous event handling. On every clock cycle, the RT thread wakes and signals each active DAQ driver to acquire all active inputs from external experiment hardware. These data are made available to other components while the RT thread executes any real-time instructions contained in loaded modules. When each module has finished executing, the RT thread signals each DAQ driver to write any output signals to the experiment hardware. The UI thread manages the graphical components of the system as well as user events triggered through the interface. Each module features its own encapsulated interface through which users can control module execution and modify its various parameters.  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/rtxi-diagram-scaled.png&quot;&gt;
   &lt;img src=&quot;/assets/img/rtxi-diagram-scaled.png&quot; class=&quot;img-responsive center-block&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RTXI uses the open source &lt;a href=&quot;https://xenomai.org&quot;&gt;Xenomai&lt;/a&gt; framework to implement communication with a variety of commercially available multifunction DAQ cards with both analog and digital input and output channels. This makes RTXI essentially hardware-agnostic and able to communicate with multiple actuators and sensors that may span different modalities. Modules contain function-specific code that can be used in combinations to build custom workflows and experiment protocols. They are compiled outside the core RTXI source tree as shared object libraries that are linked at runtime. This architecture gives RTXI several important features:  &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Reduced overhead that maximizes real-time performance by loading a minimal set of modules at startup&lt;/li&gt;
  &lt;li&gt;Code reusability which eliminates the need to program new experiments entirely from scratch&lt;/li&gt;
  &lt;li&gt;Ease by which users can share modules by distributing source code or compiled versions of their modules&lt;/li&gt;
  &lt;li&gt;The ability to create and save the entire RTXI workspace and experimental setup for use at a later date&lt;/li&gt;
  &lt;li&gt;A simple process by which multiple developers can contribute new features with minimal changes to core RTXI source code.&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sat, 06 Dec 2014 00:00:00 -0500</pubDate>
        <link>http://rtxi.org//docs/tutorials/2014/12/06/rtxi-architecture/</link>
        <guid isPermaLink="true">http://rtxi.org//docs/tutorials/2014/12/06/rtxi-architecture/</guid>
      </item>
    
      <item>
        <title>RTXI and Dynamic Clamp</title>
        <description>&lt;p&gt;The dynamic clamp is a real-time electrophysiology technique where simulated membrane conductances are artificially injected into a cell via intracellular electrodes. It works by reading membrane potentials, amplifiing, and then feeding them into a dynamic clamp system that contains a model of the desired membrane conductance and generates a current to be injected back into the cell in real time. For digital systems, the membrane conductance is a set of equations that must be computed, whereas for an analog system, the current is the output of a dedicated electrical circuit. The injected dynamic clamp current acts on the cell in parallel with other membrane currents which, depending on the model equations, can represent ion channels, electrical coupling between cells, or synaptic input. This technique has many possible uses. With neurons, it can be used to construct hybrid networks of real and model neurons and even attach virtual dendrites. For an excellent video tutorial, see this video for the following paper in the Journal of Visualized Experiments.  &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/dclamp.png&quot; alt=&quot;Dynamic Clamp Figure&quot; /&gt;  &lt;/p&gt;

&lt;h4 id=&quot;electrode-compensation-and-dynamic-clamp-instability&quot;&gt;Electrode Compensation and Dynamic Clamp Instability&lt;/h4&gt;
&lt;p&gt;When dynamic clamp is performed using two intracellular electrodes, one electrode records the membrane potential while the other is used for current injection. In cases where only one intracellular electrode is feasible, the same electrode is used for voltage measurement and current injection. This poses a problem for measurement accuracy because the injected current induces a voltage drop through the electrode. One method to compensate for this issue is to use your amplifier in “bridge balance” mode, which approximates the electrode as a single resistance and subtracts the voltage drop across the electrode from the total recorded voltage. This method can only be used if the electrode resistance stays constant. An alternative method is to operate your amplifier in “discontinuous current clamp” mode, in which the electrode alternates between recording the voltage and injecting current. This method is valid only if the electrode is at least two orders of magnitude faster than what you are trying to observe in the recordings.  &lt;/p&gt;

&lt;p&gt;It is important to minimize measurement errors in dynamic clamp because the artifacts propagate through the closed-loop and can lead to oscillatory instability. This instability arises when the artificial conductance is comparable to the resting input conductance of the cell and limits the conductance range that can be applied using dynamic clamp. It is directly related to the sampling delay and is exaggerated by insufficient electrode series resistance and capacitance compensation. Increasing the sampling rate of the dynamic clamp system increases dynamic clamp stability; however, this improvement, is constrained by how well the electrode series resistance and capacitance are compensated. Dynamic clamp sampling rates are usually justified by the temporal dynamics of the simulated models. For action potentials on the order of a few milliseconds wide, 10kHz is a common sampling rate. However, faster sampling rates increase the stable operating range for the dynamic clamp system and increase the maximum conductance that maintains a stable system. RTXI is capable of handling much higher sampling rates due to the low overhead in the Linux OS.  &lt;/p&gt;

&lt;h4 id=&quot;numerical-methods&quot;&gt;Numerical Methods&lt;/h4&gt;
&lt;p&gt;Similar to the effect of experimental measurement error, errors in simulating the virtual conductance also affect dynamic clamp performance. Methodologies for implementing the numerical integration of the gating variables typically employ first-order numerical methods, either Euler or exponential Euler. These approximations are used because of the real-time temporal constraints on how rapidly the calculations for integrating the gating variables must occur. In general, numerical accuracy increases as the time step of integration decreases. Unlike traditional model simulations, however, with real-time systems it is not practical to make the time step smaller and simply wait longer for the simulation result. For small time steps, both integration methods are comparable, but at larger time steps, the exponential Euler method performs worse than the Euler method. The error bounds for both methods can be characterized in terms of two ratios: the time step over the time constant (δt/τ), and the voltage measurement error over the slope factor of the steady-state activation curve of the voltage-dependent gating variable (εV/|d|). When δt/τ is large relative to εV/|d|, no amount of improvement in measurement error can improve the error bound due to the numerical inaccuracies caused by a relatively large time step.  &lt;/p&gt;

&lt;p&gt;For more information, see:   &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://dx.doi.org/10.3791/2275&quot;&gt;Lobb and Paladini. Application of a NMDA Receptor Conductance in Rat Midbrain Dopaminergic Neurons Using the Dynamic Clamp Technique. J Vis Exp (2010) (46)&lt;/a&gt;   &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.springer.com/biomed/neuroscience/book/978-0-387-89278-8&quot;&gt;Destexhe A, Bal T, eds. Dynamic clamp: From principles to applications. Springer (2009).&lt;/a&gt;  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://dx.doi.org/10.1016/j.jneumeth.2007.10.009&quot;&gt;Bettencourt J.C., Lillis K.P., Stupin L.R., White J.A. Effects of imperfect dynamic clamp: Computational and experimental results (2008) Journal of Neuroscience Methods, 169 (2): 282-289.&lt;/a&gt;  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://dx.doi.org/10.1088/1741-2560%2F1%2F4%2F001&quot;&gt;R.J. Butera and M.L. McCarthy. Analysis of real-time numerical integration methods applied to dynamic clamp experiments, J. Neural Eng. 1 (2004), pp. 187–194.&lt;/a&gt;  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://dx.doi.org/10.1016/j.tins.2004.02.004&quot;&gt;Prinz AA, Abbott LF, Marder E. The dynamic clamp comes of age. (2004) TINS 27: 218–224.&lt;/a&gt;  &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 05 Dec 2014 00:00:00 -0500</pubDate>
        <link>http://rtxi.org//docs/tutorials/2014/12/05/dynamic-clamp/</link>
        <guid isPermaLink="true">http://rtxi.org//docs/tutorials/2014/12/05/dynamic-clamp/</guid>
      </item>
    
      <item>
        <title>RTXI HDF5 Data Files</title>
        <description>&lt;p&gt;The HDF5 file format is a portable and extensible binary data format designed for complex data. It features support for an unlimited variety of datatypes, and has flexible and efficient I/O. HDF5 features a hierarchical structure that allows you to access chunks of data without loading the entire file into memory. An HDF5 file produced by RTXI’s Data Recorder is organized as shown on the right:  &lt;/p&gt;

&lt;div class=&quot;container&quot;&gt;
   &lt;div class=&quot;col-sm-4&quot;&gt;
      &lt;a href=&quot;/assets/img/hdf5-rtxi.png&quot;&gt;&lt;img src=&quot;/assets/img/hdf5-rtxi.png&quot; class=&quot;img-responsive&quot; /&gt;&lt;/a&gt;
   &lt;/div&gt;
   &lt;div class=&quot;col-sm-8&quot;&gt;
      &lt;a href=&quot;/assets/img/hdf5-rtxi-2.png&quot;&gt;&lt;img src=&quot;/assets/img/hdf5-rtxi-2.png&quot; class=&quot;img-responsive&quot; /&gt;&lt;/a&gt;
   &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;At the topmost level, an RTXI HDF5 file is divided into separate &lt;strong&gt;Trial&lt;/strong&gt; groups, each of which contains the complete set of system options, module settings, and model parameter values that existed at the time that data was recorded. Every time you stop and restart a module from which data is sent to the Data Recorder, a new Trial is created. Each Trial is timestamped with a start and end time. The Data Recorder also has the option to append trials to an existing HDF5 file. For this reason, each Trial has its own data and system attributes.  &lt;/p&gt;

&lt;p&gt;The parameters for modules and all system settings are saved in the &lt;strong&gt;Parameters&lt;/strong&gt; group within each Trial group. The name of each parameter includes the module ID number within RTXI, the name of the module, and the name of the parameter itself. If the value of the parameter changes during recording, all the values are saved with a corresponding index value that is the timestamp in nanoseconds from the start of the recording.  &lt;/p&gt;

&lt;p&gt;The real-time data is saved in the &lt;strong&gt;Synchronous&lt;/strong&gt; group within each Trial group. This group contains separate datasets with the name of each channel and a single dataset that contains all the synchronous data.&lt;/p&gt;

&lt;p&gt;There are various software available for working with HDF5 files. To simply browse the file structure, you can use the free HDFView application. HDFView provides some limited editing capabilities. For trials where only a single channel is saved, you can also preview a plot of the data. To extract the data for analysis and for complete editing capabilities, APIs are available for MATLAB, GNU Octave, Igor Pro, Mathematica, Python, Scilab, and other software. See this list maintained by the HDF Group.&lt;/p&gt;

&lt;p&gt;We provide here a collection of MATLAB functions and a simple GUI for browsing through the trials of an RTXI v1.3 HDF5 file with addtional examples of how to extract data and add new datasets to your file. &lt;strong&gt;To load RTXI HDF5 files into MATLAB, you no longer need to “matlabize” your HDF5 files, provided you use the MATLAB functions in RTXIh5.zip.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Dec 2014 00:00:00 -0500</pubDate>
        <link>http://rtxi.org//docs/tutorials/2014/12/04/rtxi-hdf5-data-files/</link>
        <guid isPermaLink="true">http://rtxi.org//docs/tutorials/2014/12/04/rtxi-hdf5-data-files/</guid>
      </item>
    
      <item>
        <title>Manually Configuring RTXI</title>
        <description>&lt;p&gt;You can manually configure RTXI with many options. For example, you can run RTXI 2.0 using the RTAI rather than the default Xenomai, and you can set up RTXI in non-real-time mode using the POSIX interface. You may also direct RTXI to libraries/packages in non-standard locations. The full configure options for are below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;configure&lt;span class=&quot;s1&quot;&gt;&amp;#39; configures RTXI trunk to adapt to many kinds of systems.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;Usage: ./configure [OPTION]... [VAR=VALUE]...&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;To assign environment variables (e.g., CC, CFLAGS...), specify them as&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;VAR=VALUE.  See below for descriptions of some of the useful variables.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;Defaults for the options are specified in brackets.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;Configuration:&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  -h, --help              display this help and exit&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;      --help=short        display options specific to this package&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;      --help=recursive    display the short help of all the included packages&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  -V, --version           display version information and exit&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  -q, --quiet, --silent   do not print `checking...&amp;#39;&lt;/span&gt; messages
      --cache-file&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;FILE   cache &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;results in FILE &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;disabled&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  -C, --config-cache      &lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;--cache-file&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;config.cache&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  -n, --no-create         do not create output files&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;      --srcdir=DIR        find the sources in DIR [configure dir or `..&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

Installation directories:
  --prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;PREFIX         install architecture-independent files in PREFIX
                          &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;/usr/local&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --exec-prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;EPREFIX   install architecture-dependent files in EPREFIX
                          &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;PREFIX&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

By default, &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;make install&lt;span class=&quot;s1&quot;&gt;&amp;#39; will install all the files in&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;`/usr/local/bin&amp;#39;&lt;/span&gt;, &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;/usr/local/lib&lt;span class=&quot;s1&quot;&gt;&amp;#39; etc.  You can specify&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;an installation prefix other than `/usr/local&amp;#39;&lt;/span&gt; using &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;--prefix&lt;span class=&quot;s1&quot;&gt;&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;for instance `--prefix=$HOME&amp;#39;&lt;/span&gt;.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DIR            user executables &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;EPREFIX/bin&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --sbindir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DIR           system admin executables &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;EPREFIX/sbin&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --libexecdir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DIR        program executables &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;EPREFIX/libexec&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --sysconfdir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DIR        &lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt;-only single-machine data &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;PREFIX/etc&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --sharedstatedir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DIR    modifiable architecture-independent data &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;PREFIX/com&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --localstatedir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DIR     modifiable single-machine data &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;PREFIX/var&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --libdir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DIR            object code libraries &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;EPREFIX/lib&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --includedir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DIR        C header files &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;PREFIX/include&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --oldincludedir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DIR     C header files &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; non-gcc &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;/usr/include&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --datarootdir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DIR       &lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt;-only arch.-independent data root &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;PREFIX/share&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --datadir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DIR           &lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt;-only architecture-independent data &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DATAROOTDIR&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --infodir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DIR           info documentation &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DATAROOTDIR/info&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --localedir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DIR         locale-dependent data &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DATAROOTDIR/locale&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --mandir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DIR            man documentation &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DATAROOTDIR/man&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --docdir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DIR            documentation root &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DATAROOTDIR/doc/rtxi&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --htmldir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DIR           html documentation &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DOCDIR&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --dvidir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DIR            dvi documentation &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DOCDIR&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --pdfdir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DIR            pdf documentation &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DOCDIR&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --psdir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DIR             ps documentation &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DOCDIR&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

Program names:
  --program-prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;PREFIX            prepend PREFIX to installed program names
  --program-suffix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;SUFFIX            append SUFFIX to installed program names
  --program-transform-name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;PROGRAM   run sed PROGRAM on installed program names

X features:
  --x-includes&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DIR    X include files are in DIR
  --x-libraries&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DIR   X library files are in DIR

System types:
  --build&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;BUILD     configure &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; building on BUILD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;guessed&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --host&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;HOST       cross-compile to build programs to run on HOST &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;BUILD&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; not include FEATURE &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;same as --enable-FEATURE&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  --enable-FEATURE&lt;span class=&quot;o&quot;&gt;[=&lt;/span&gt;ARG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;  include FEATURE &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;yes&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --enable-shared&lt;span class=&quot;o&quot;&gt;[=&lt;/span&gt;PKGS&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;  build shared libraries &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;yes&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --enable-static&lt;span class=&quot;o&quot;&gt;[=&lt;/span&gt;PKGS&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;  build static libraries &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;yes&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --enable-fast-install&lt;span class=&quot;o&quot;&gt;[=&lt;/span&gt;PKGS&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
                          optimize &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; fast installation &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;yes&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --disable-dependency-tracking  speeds up one-time build
  --enable-dependency-tracking   &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; not reject slow dependency extractors
  --disable-libtool-lock  avoid locking &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;might &lt;span class=&quot;nb&quot;&gt;break &lt;/span&gt;parallel builds&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  --enable-xenomai        build the Xenomai interface
  --enable-posix          build the POSIX non-RT interface
  --enable-debug          turn on debugging
  --enable-comedi         build the comedi driver
  --enable-analogy        build the analogy driver
  --enable-ni             build the ni driver
  --enable-clampprotocol     build the clamp protocol module &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;enabled&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

Optional Packages:
  --with-PACKAGE&lt;span class=&quot;o&quot;&gt;[=&lt;/span&gt;ARG&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;    use PACKAGE &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;yes&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --without-PACKAGE       &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; not use PACKAGE &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;same as --with-PACKAGE&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  --with-cppunit-prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;PFX   Prefix where CppUnit is installed &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;optional&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  --with-cppunit-exec-prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;PFX  Exec prefix where CppUnit is installed &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;optional&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  --with-pic              try to use only PIC/non-PIC objects &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;use
                          both&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --with-gnu-ld           assume the C compiler uses GNU ld &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  --with-x                use the X Window System
  --with-Qt-dir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DIR       DIR is equal to &lt;span class=&quot;nv&quot;&gt;$QTDIR&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; you have followed the
                          installation instructions of Trolltech. Header files
                          are in DIR/include, binary utilities are in DIR/bin.
                          The library is in DIR/lib, unless --with-Qt-lib-dir
                          is also set.
  --with-Qt-include-dir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DIR
                          Qt header files are in DIR
  --with-Qt-bin-dir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DIR   Qt utilities such as moc and uic are in DIR
  --with-Qt-lib-dir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DIR   The Qt library is in DIR
  --with-Qt-lib&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;LIB       Use -lLIB to link with the Qt library
  --with-rtai-config&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;FILE location of the rtai-config program

Some influential environment variables:
  CC          C compiler &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;  &lt;/span&gt;CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; you have libraries in a
              nonstandard directory 
  LIBS        libraries to pass to the linker, e.g. -l
  CPPFLAGS    C/C++/Objective C preprocessor flags, e.g. -I &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;
              you have headers in a nonstandard directory 
  CPP         C preprocessor
  CXX         C++ compiler &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;  &lt;/span&gt;CXXFLAGS    C++ compiler flags
  CXXCPP      C++ preprocessor
  XMKMF       Path to xmkmf, Makefile generator &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; X Window System&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If there is a flag you want to set, say, &lt;code&gt;--enable-ni&lt;/code&gt;, go to the base of the RTXI git directory and run:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./configure --enable-ni
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make -j&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;nproc&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo make install -j&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;nproc&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These three lines will apply your desired confguration to the build options and then compile and install RTXI.&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Dec 2014 00:00:00 -0500</pubDate>
        <link>http://rtxi.org//docs/tutorials/2014/12/04/manually-configuring-rtxi/</link>
        <guid isPermaLink="true">http://rtxi.org//docs/tutorials/2014/12/04/manually-configuring-rtxi/</guid>
      </item>
    
      <item>
        <title>Can I run RTXI in non-real-time?</title>
        <description>&lt;p&gt;RTXI can be run in non-real-time to debug your code. This will require that you manually configure and recompile RTXI. In the RTXI directory, go to the scripts directory and run:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo ./install-rtxi.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will be prompted to enter your system configuration. Select “2” to run in non-real-time (POSIX). &lt;/p&gt;

&lt;p&gt;Running RTXI in non-real-time is useful for debugging purposes mainly, and it also allows the application to be installed without having to install a real-time kernel beforehand.&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Dec 2014 00:00:00 -0500</pubDate>
        <link>http://rtxi.org//docs/faqs/2014/12/04/can-i-run-rtxi-in-non-real-time/</link>
        <guid isPermaLink="true">http://rtxi.org//docs/faqs/2014/12/04/can-i-run-rtxi-in-non-real-time/</guid>
      </item>
    
      <item>
        <title>Benchmarking Real-time Performance</title>
        <description>&lt;p&gt;Here is a list of tools for benchmarking real-time performance, both for the operating system and for the RTXI application itself. In general, you should use these to test newly installed kernels, but you can also use them to help diagnose performance issues experienced when running RTXI.  &lt;/p&gt;

&lt;h3 id=&quot;xenomai-based-tests&quot;&gt;Xenomai-based Tests&lt;/h3&gt;
&lt;p&gt;Xenomai comes with benchmarking tools for both real-time and user-space kernels. They are accessible from &lt;code&gt;/usr/xenomai/bin&lt;/code&gt;   &lt;/p&gt;

&lt;h4 id=&quot;latency-test&quot;&gt;Latency Test&lt;/h4&gt;
&lt;p&gt;This test will verify the overall performance of your system and is the best indicator of your real-time performance. It will immediately let you know if you have successfully installed a correctly functioning real-time kernel. In oneshot mode, it measures the difference in time between the expected switch time and the time when a task is actually called by the scheduler. This test prints one line every second and gives you the minimum, average, and maximum latencies for that period as well the minimum and maximum overall latencies that occurred over the entire test. Open up some other programs, copy some files from one location to another, and load the network connection to see how it affects the latency. You should find slightly higher latencies with the user space test than the kernel space test.  &lt;/p&gt;

&lt;p&gt;Your real-time performance is limited by the maximum latency (lat max) you can achieve and you generally don’t want to be doing other tasks. You also should not see any overruns, which occurs when the latency completely exceeds your nominal period. Negative time in the latency test is due to the fact that RTAI performs a calibration at startup that tries to minimize the jitter in the real-time task and anticipates the call. To calibrate for negative latencies, run: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# echo 0 &amp;gt; /proc/xenomai/latency&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you periodically see an overrun (perhaps every 64 seconds) that results in a maximum latency of several hundred microseconds, you may have an SMI (System Maintenance Interrupt) issue. This feature can be found on certain chipsets e.g. Intel 82845 845. Disabling SMI can cause some computers to overheat and may damage those computers. Other “latency killers” are: heavy DMA activities (using the hard disk), using an accelerated X-server, USB legacy support, power management (APM and ACPI), and CPU frequency scaling. If you have disabled all of these in the kernel already, check your BIOS and see if you can disable them there.  &lt;/p&gt;

&lt;h4 id=&quot;preempt-test&quot;&gt;Preempt Test&lt;/h4&gt;
&lt;p&gt;This test is a stress utility that verifies the real-time schedulers under heavy processing load. This software combines the latency calibration task with a fast and slow task to have two levels of preemption.  &lt;/p&gt;

&lt;h4 id=&quot;switch-test&quot;&gt;Switch Test&lt;/h4&gt;
&lt;p&gt;This test provides information about the maximum amount of time RTAI needs to disable interrupts. The test uses a repeated sequence of suspend/resume and semaphore signal/wait calls under a heavy processing load. The switching time should be less than the maximum latency time. The real latency limitation is seldom due to RTAI but an intrinsic drawback of using a general purpose CPU for real-time applications.  &lt;/p&gt;

&lt;h3 id=&quot;rtxi-based-tests&quot;&gt;RTXI-based Tests&lt;/h3&gt;
&lt;p&gt;Internal RTXI performance benchmarks are still in development. Currently, the performance_measurement module can be used to track the accumulated average cycle time and the accumulated average computation time and compare them to the nominal real-time period.  &lt;/p&gt;

&lt;p&gt;The performance measurement module is included in RTXI by default, under the System heading in the menubar. Running it while running modules versus nothing else will show you the performance cost your modules. If you see high computation times relative to your real-time period, consider increading your RT period or simplifying your module(s). &lt;/p&gt;
</description>
        <pubDate>Thu, 04 Dec 2014 00:00:00 -0500</pubDate>
        <link>http://rtxi.org//docs/troubleshoot/2014/12/04/benchmarking-real-time-performance/</link>
        <guid isPermaLink="true">http://rtxi.org//docs/troubleshoot/2014/12/04/benchmarking-real-time-performance/</guid>
      </item>
    
      <item>
        <title>32 or 64 Bit? Your Processor Explained</title>
        <description>&lt;p&gt;64-bit and 32-bit refer to how addresses and memory are handled in different instruction set architectures. For clarity, the terms ‘32-bit’ and ‘64-bit’ have dual meanings. The first refers to the size of addressable chunks of memory. Memory is organized in chunks, called words, that a processor can handle at once. 32 and 64-bit systems respectively handle chunks of memory that are 32 and 64 bits in size. The second meaning refers to the size of the addresses used to catalog all of the addressable points in memory. In other words, each word in memory has an address that the processor uses to find it. 32-bit systems use 32-bit-long addresses, and the same follows for 64-bit ones. Note that it just so happens that these systems have the same address size and word size. It’s not necessarily the case. For instance, early PCs often had 8-bit words and 16-bit addresses.  &lt;/p&gt;

&lt;p&gt;Most commercially available systems today come with 64-bit capable processors and pre-installed 64-bit operating systems. 32-bit applications are compatible with them because the 64-bit format is backwards-compatible. The space addressable by 32 bits is a subset of what is addressed with 64, and the processors are built to handle 32-bit chunks of memory. Simply put, if you have a 64-bit compatible processor, run 64-bit software.  &lt;/p&gt;

&lt;p&gt;One extra consideration is the operating system. Applications other than drivers and similar software interface with the hardware through the operating system. Therefore, it is important to consider the type of operating system installed. 32-bit OSes can only handle 32-bit operations, but 64-bit ones can properly use both.  &lt;/p&gt;

&lt;p&gt;Altogether, none of this is likely to be an issue with machines from the past few years. Lately, AMD and Intel have introduced different brand names and code names for their processors, which can get confusing quite easily. In case you’re running older hardware, here’s a list of a few 64-bit capable processors.&lt;/p&gt;

&lt;div class=&quot;col-md-6&quot;&gt;  
&lt;strong&gt;AMD&lt;/strong&gt; (aka &quot;x86-64&quot;, &quot;AMD64&quot;, or &quot;x64&quot;):  
&lt;ol&gt;
   &lt;li&gt; Athlon 64  &lt;/li&gt;
   &lt;li&gt; AMD Athlon 64 X2 &lt;/li&gt;
   &lt;li&gt; AMD Athlon 64 FX &lt;/li&gt;
   &lt;li&gt; AMD Athlon II (X2/X3/X4) &lt;/li&gt;
   &lt;li&gt; AMD Opteron &lt;/li&gt;
   &lt;li&gt; AMD Turion 64 &lt;/li&gt;
   &lt;li&gt; AMD Turion 64 X2 &lt;/li&gt;
   &lt;li&gt; AMD Sempron (&quot;Palermo&quot; E6 stepping and all &quot;Manila&quot; models) &lt;/li&gt;
   &lt;li&gt; AMD Phenom (X2/X3/X4) &lt;/li&gt;
   &lt;li&gt; AMD Phenom II (X2/X3/X4) &lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;div class=&quot;col-md-6&quot;&gt;  
&lt;strong&gt;Intel&lt;/strong&gt; (aka &quot;IA-32e&quot;, &quot;EM64T&quot;, or &quot;Intel 64&quot;):   
&lt;ol&gt;
   &lt;li&gt; Netburst family &lt;/li&gt;
   &lt;li&gt; some Celeron D&#39;s: LGA 775 &quot;Prescott&quot; models &lt;/li&gt;
   &lt;li&gt; some Pentium 4&#39;s: &quot;Prescott 2M,&quot; &quot;Irwindale&quot; &quot;Cedar Mill&quot; &lt;/li&gt;
   &lt;li&gt; Pentium D &lt;/li&gt;
   &lt;li&gt; Pentium Extreme Edition &lt;/li&gt;
   &lt;li&gt; Intel Core &lt;/li&gt;
   &lt;li&gt; Xeon: Core 2, Dual Core, Celeron &lt;/li&gt;
   &lt;li&gt; Nehalem: Core i3, i5, i7, Intel Atom &lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 04 Dec 2014 00:00:00 -0500</pubDate>
        <link>http://rtxi.org//docs/tutorials/2014/12/04/32-or-64-bit-processors/</link>
        <guid isPermaLink="true">http://rtxi.org//docs/tutorials/2014/12/04/32-or-64-bit-processors/</guid>
      </item>
    
      <item>
        <title>How do I use more than one DAQ?</title>
        <description>&lt;p&gt;RTXI has no built-in software limitations on the number of DAQ cards. You will need to edit the configuration file, however. Here is the relevant excerpt of /etc/rtxi.conf:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;OBJECT&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;component=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;plugin&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;library=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;comedi_driver.so&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;PARAM&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;/dev/comedi0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/PARAM&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;PARAM&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Num Devices&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/PARAM&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;OBJECT&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;13&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/OBJECT&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Edit the lines to add another COMEDI device and change the number of devices:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;PARAM&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;/dev/comedi0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/PARAM&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;PARAM&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;/dev/comedi1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/PARAM&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;PARAM&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Num Devices&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/PARAM&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This applies to the COMEDI drivers that come with RTAI and haven’t been tested with ANALOGY. In theory, it’ll work. Just replace “comedi” with “analogy” in the names. &lt;/p&gt;

</description>
        <pubDate>Wed, 03 Dec 2014 00:00:00 -0500</pubDate>
        <link>http://rtxi.org//docs/faqs/2014/12/03/how-do-i-use-more-than-one-daq/</link>
        <guid isPermaLink="true">http://rtxi.org//docs/faqs/2014/12/03/how-do-i-use-more-than-one-daq/</guid>
      </item>
    
      <item>
        <title>Can I use RTAI instead of Xenomai?</title>
        <description>&lt;p&gt;Yes, you can use RTAI. Before v2.0, RTXI ran on an RTAI-patched kernel. Xenomai is actually a fork of RTAI and is designed to be much easier to customize and patch. To use RTXI, you will not be able to run our install_rtxi.sh script. Instead, you will need to download RTAI and patch then install a kernel manually.  &lt;/p&gt;

&lt;p&gt;Once you have the kernel running, go to your RTXI git directory and run:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sh autogen.sh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./configure --enable-rtai
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 03 Dec 2014 00:00:00 -0500</pubDate>
        <link>http://rtxi.org//docs/faqs/2014/12/03/can-i-use-rtai-instead-of-xenomai/</link>
        <guid isPermaLink="true">http://rtxi.org//docs/faqs/2014/12/03/can-i-use-rtai-instead-of-xenomai/</guid>
      </item>
    
      <item>
        <title>Can I use a different Linux distribution?</title>
        <description>&lt;p&gt;Yes. RTXI has been successfully installed on Ubuntu, openSUSE, Debian, and Fedora. Keep in mind that we use Debian for bugtesting, benchmarking, etc. and that different distributions have different ways of automating scripts, inserting kernel modules, and escalating priveleges. &lt;/p&gt;
</description>
        <pubDate>Wed, 03 Dec 2014 00:00:00 -0500</pubDate>
        <link>http://rtxi.org//docs/faqs/2014/12/03/can-i-use-a-different-linux-distro/</link>
        <guid isPermaLink="true">http://rtxi.org//docs/faqs/2014/12/03/can-i-use-a-different-linux-distro/</guid>
      </item>
    
  </channel>
</rss>
